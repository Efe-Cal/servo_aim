import RPi.GPIO as GPIO
import math
sines={"0": 0     ,"16" : 0.275637	,"32" : 0.529919,
"1": 0.017452	  ,"17" : 0.292372	,"33" : 0.544639,
"2": 0.034899	  ,"18" : 0.309017	,"34" : 0.559193,
"3": 0.052336	  ,"19" : 0.325568	,"35" : 0.573576,
"4": 0.069756	  ,"20" : 0.34202	  ,"36" : 0.587785,
"5": 0.087156	  ,"21" : 0.358368	,"37" : 0.601815,
"6": 0.104528	  ,"22" : 0.374607	,"38" : 0.615661,
"7": 0.121869	  ,"23" : 0.390731	,"39" : 0.62932,
"8": 0.139173	  ,"24" : 0.406737	,"40" : 0.642788,
"9": 0.156434	  ,"25" : 0.422618	,"41" : 0.656059,
"10" : 0.173648	,"26" : 0.438371	,"42" : 0.669131,
"11" : 0.190809	,"27" : 0.45399	  ,"43" : 0.681998,
"12" : 0.207912	,"28" : 0.469472	,"44" : 0.694658,
"13" : 0.224951	,"29" : 0.48481	  ,"45" : 0.707107,
"14" : 0.241922	,"30" : 0.5	,
"15" : 0.258819	,"31" : 0.515038,	
"46" : 0.71934	,"61" : 0.87462	  ,"76" : 0.970296,
"47" : 0.731354	,"62" : 0.882948	,"77" : 0.97437,
"48" : 0.743145	,"63" : 0.891007	,"78" : 0.978148,
"49" : 0.75471	,"64" : 0.898794	,"79" : 0.981627,
"50" : 0.766044	,"65" : 0.906308	,"80" : 0.984808,
"51" : 0.777146	,"66" : 0.913545	,"81" : 0.987688,
"52" : 0.788011	,"67" : 0.920505	,"82" : 0.990268,
"53" : 0.798636	,"68" : 0.927184	,"83" : 0.992546,
"54" : 0.809017	,"69" : 0.93358	  ,"84" : 0.994522,
"55" : 0.819152	,"70" : 0.939693	,"85" : 0.996195,
"56" : 0.829038	,"71" : 0.945519	,"86" : 0.997564,
"57" : 0.838671	,"72" : 0.951057	,"87" : 0.99863,
"58" : 0.848048	,"73" : 0.956305	,"88" : 0.999391,
"59" : 0.857167	,"74" : 0.961262	,"89" : 0.999848,
"60" : 0.866025	,"75" : 0.965926	,"90" : 1}

servoPIN1= 17
servoPIN2=18
GPIO.setmode(GPIO.BCM)
GPIO.setup(servoPIN1, GPIO.OUT)
pwm1 = GPIO.PWM(servoPIN1, 50)
GPIO.setmode(GPIO.BCM)
pwm1.start(0)

GPIO.setup(servoPIN2, GPIO.OUT)
pwm2 = GPIO.PWM(servoPIN2, 50) 
pwm2.start(0)

class ServoControl:
    def __init__(self):
        self.current_angle=0
    def aciAyarla(self,aci,no):
        x=(1/180)*aci + 1
        duty=x*5
        exec(f"pwm{no}.ChangeDutyCycle(duty)")
        self.current_angle+=duty

    aciAyarla(0)
        
    def aim(self,distance,dist2cent_x,dist2cent_y):
        #horizental aim
        hipotenus=math.sqrt(dist2cent_x**2+distance**2)
        sineh=dist2cent_x//hipotenus
        degh=sines[str(abs(sineh))]
        self.aciAyarla(self.current_angle+degh,1)
        
        #vertical aim
        hipotenus=math.sqrt(dist2cent_y**2+distance**2)
        sinev=dist2cent_x//hipotenus
        degv=sines[str(abs(sinev))]
        self.aciAyarla(self.current_angle+degv,2)
